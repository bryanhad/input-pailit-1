// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model User {
//     id            String    @id @default(cuid())
//     name          String
//     email         String    @unique
//     emailVerified DateTime?
//     image         String
//     role          String    @default("USER")

//     accounts Account[]
//     sessions Session[]

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@map("users")
// }

// model Account {
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String?
//     access_token      String?
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String?
//     session_state     String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@id([provider, providerAccountId])
//     @@map("accounts")
// }

// model Session {
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@map("sessions")
// }

model Creditor {
    id String @id @default(cuid())

    nama                      String
    slug                      String @unique
    jenis                     String
    NIKAtauNomorAktaPendirian String?
    alamat                    String?
    email                     String?
    nomorTelepon              String?
    korespondensi             String?
    totalTagihan              String
    sifatTagihan              String

    namaKuasaHukum         String?
    emailKuasaHukum        String?
    nomorTeleponKuasaHukum String?
    alamatKuasaHukum       String?

    attachments Attachment[]

    @@map("creditors")
}

model Attachment {
    id String @id @default(cuid())

    nama        String
    ready       Boolean
    deskripsi   String?
    Creditor    Creditor? @relation(fields: [creditorId], references: [id])
    creditorId  String?

    @@map("attachments")
}
