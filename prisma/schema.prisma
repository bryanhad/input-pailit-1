// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    // will enable to use postgres's full text search later, so we can search for jobs
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    // provider = "postgresql"
    // url      = env("LOCAL_POSTGRES_URL")
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    session       Session?
    role          String    @default("USER")
    status        String    @default("NOT-VERIFIED")

    creditors            Creditor[] @relation("UserCreditor")
    lastUpdatedCreditors Creditor[] @relation("LastUpdatedByUser")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Session {
    sessionToken String   @unique
    userId       String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sessions")
}

model VerificationToken {
    email   String   @id
    token   String
    expires DateTime

    createdAt DateTime @default(now())

    @@map("verification_tokens")
}

model Creditor {
    id                        String  @id @default(cuid())
    number                    Int     @default(autoincrement())
    nama                      String
    slug                      String  @unique
    jenis                     String
    NIKAtauNomorAktaPendirian String?
    alamat                    String?
    email                     String?
    nomorTelepon              String?
    korespondensi             String?
    totalTagihan              String
    sifatTagihan              String

    namaKuasaHukum         String?
    emailKuasaHukum        String?
    nomorTeleponKuasaHukum String?
    alamatKuasaHukum       String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attachments Attachment[]
    user        User         @relation("UserCreditor", fields: [userId], references: [id])
    userId      String

    lastUpdatedBy       User?   @relation("LastUpdatedByUser", fields: [lastUpdatedByUserId], references: [id])
    lastUpdatedByUserId String?

    @@map("creditors")
}

model Attachment {
    id String @id @default(cuid())

    nama       String
    ready      Boolean
    deskripsi  String?
    Creditor   Creditor @relation(fields: [creditorId], references: [id])
    creditorId String

    @@map("attachments")
}
